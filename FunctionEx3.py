# ***************Anonymous Function Or Lambda fun ************
def fun():
    print("This is fun")
print("--------------simple lambda fun -----------------")
l=lambda :print("This is lambda function")
l()
print("----------------takes 2 arg and returns expresion-----------")
l2=lambda x,y=10: (x-y)
print(l2(20))
print("--------------------1 arg eith expresion----------------------")
l3=lambda x:print(x)
l3(30)
print("--------------------nested lambda fun----------------------")
l4=lambda :lambda :print("This is inner lambda")
t=l4()
t()
print("--------------------nested lambda fun-2---------------------")
l5=lambda x:lambda :print(x)
t=l5(10)
t()
print("--------------------nested lambda fun-3---------------------")
l6=lambda x:lambda y: x+y
t=l6(10)
print(t(20))
print("--------------------nested lambda fun-4---------------------")
def fun1():
    print("hello")
t=lambda : fun1()
t()
print("--------------Passing lambda funtion to another funtion-----------------")
def fun2(t):
    print("This is simple fun")
    t()
fun2(lambda:print("This is a lambda fun"))
print("--------------Passing lambda funtion to another funtion-2---------------")
l5=lambda t:print("This is lambda fun1",t())
l5(lambda:"This is lambda fun2")
print("--------------returning lambda funtion in another funtion-1---------------")
def fun3():
    print("This is simple fun")
    return lambda :print("This is a lambda fun")
t=fun3()
t()
print("--------------returning lambda funtion in another funtion-2---------------")
def fun4(x):
    print("This is simple fun")
    return lambda y:print(x+y,"This is a addition by lambda fun")
t1=fun4(10)
t1(20)